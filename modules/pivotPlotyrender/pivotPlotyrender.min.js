(function () {
  var callWithJQuery;

  callWithJQuery = function (pivotModule) {
    if (typeof exports === "object" && typeof module === "object") {
      return pivotModule(require("jquery"), require("plotly.js"));
    } else if (typeof define === "function" && define.amd) {
      return define(["jquery", "plotly.js"], pivotModule);
    } else {
      return pivotModule(jQuery, Plotly);
    }
  };

  callWithJQuery(function ($, Plotly) {
    var makePlotlyChart, makePlotlyScatterChart;
    makePlotlyChart = function (hovermode, traceOptions, layoutOptions, transpose) {
      if (traceOptions == null) {
        traceOptions = {};
      }
      if (layoutOptions == null) {
        layoutOptions = {};
      }
      if (transpose == null) {
        transpose = false;
      }

      return function (pivotData, opts) {
        var isInDisplay = document.querySelector(".homePage_evolveView") ? true : false;
        var colKeys,
          columns,
          d,
          data,
          datumKeys,
          defaults,
          fullAggName,
          groupByTitle,
          hAxisTitle,
          i,
          layout,
          result,
          rowKeys,
          rows,
          titleText,
          traceKeys;
        defaults = {
          localeStrings: {
            vs: "vs",
            by: "by",
          },
          plotly: {},
          plotlyConfig: {},
        };
        opts = $.extend(true, {}, defaults, opts);
        rowKeys = pivotData.getRowKeys();
        colKeys = pivotData.getColKeys();
        traceKeys = transpose ? colKeys : rowKeys;
        if (traceKeys.length === 0) {
          traceKeys.push([]);
        }
        datumKeys = transpose ? rowKeys : colKeys;
        if (datumKeys.length === 0) {
          datumKeys.push([]);
        }
        fullAggName = pivotData.aggregatorName;
        if (pivotData.valAttrs.length) {
          fullAggName += "(" + pivotData.valAttrs.join(", ") + ")";
        }
        data = traceKeys.map(function (traceKey) {
          var datumKey, j, labels, len, trace, val, values;
          values = [];
          labels = [];
          for (j = 0, len = datumKeys.length; j < len; j++) {
            datumKey = datumKeys[j];
            val = parseFloat(pivotData.getAggregator(transpose ? datumKey : traceKey, transpose ? traceKey : datumKey).value());
            values.push(isFinite(val) ? val : null);
            labels.push(datumKey.join("#") || " ");
          }
          trace = {
            name: traceKey.join("#") || fullAggName,
          };
          if (traceOptions.type === "pie") {
            trace.values = values;
            trace.labels = labels.length > 0 ? labels : [fullAggName];
          } else {
            trace.x = transpose ? values : labels;
            trace.y = transpose ? labels : values;
          }
          return $.extend(trace, traceOptions);
        });
        if (transpose) {
          hAxisTitle = pivotData.rowAttrs.join("#");
          groupByTitle = pivotData.colAttrs.join("#");
        } else {
          hAxisTitle = pivotData.colAttrs.join("#");
          groupByTitle = pivotData.rowAttrs.join("#");
        }
        titleText = fullAggName;
        if (hAxisTitle !== "") {
          titleText += " " + opts.localeStrings.vs + " " + hAxisTitle;
        }
        if (groupByTitle !== "") {
          titleText += " " + opts.localeStrings.by + " " + groupByTitle;
        }

        layout = {
          title: titleText,
          hovermode: hovermode,
          width:
            opts.plotlyConfig.ui || isInDisplay
              ? document.querySelector("#cwPivotWrapper" + opts.plotlyConfig.nodeID + " .pvtRendererArea").offsetWidth
              : document.querySelector("#cwPivotWrapper" + opts.plotlyConfig.nodeID + " .cwPivotTable").offsetWidth,
          height:
            opts.plotlyConfig.ui || isInDisplay
              ? document.querySelector("#cwPivotWrapper" + opts.plotlyConfig.nodeID + " .pvtRendererArea").offsetHeight
              : document.querySelector("#cwPivotWrapper" + opts.plotlyConfig.nodeID + " .cwPivotTable").offsetHeight,
          margin: {
            l: isInDisplay ? 20 : 0,
            r: isInDisplay ? 20 : 0,
            b: isInDisplay ? 20 : 0,
            t: isInDisplay ? 20 : 0,
            pad: 4,
          },
        };
        if (opts.plotlyConfig.fontsize) {
          layout.font = { size: opts.plotlyConfig.fontsize };
        }

        layout.showlegend = opts.plotlyConfig.legend;
        if (traceOptions.type === "pie") {
          columns = Math.ceil(Math.sqrt(data.length));
          rows = Math.ceil(data.length / columns);
          layout.grid = {
            columns: columns,
            rows: rows,
          };
          for (i in data) {
            d = data[i];
            d.domain = {
              row: Math.floor(i / columns),
              column: i - columns * Math.floor(i / columns),
            };
            if (data.length > 1) {
              d.title = d.name;
            }
          }
        } else {
          layout.xaxis = {
            title: transpose ? fullAggName : null,
            automargin: true,
          };
          layout.yaxis = {
            title: transpose ? null : fullAggName,
            automargin: true,
          };
        }
        result = $("<div>").appendTo($("body"));
        let annotations = [];
        if (traceOptions.type === "bar") {
          let totalByX = {};
          data.forEach(function (d) {
            d[traceOptions.orientation === "h" ? "y" : "x"].forEach(function (xlabel, index) {
              totalByX[xlabel] = totalByX[xlabel]
                ? totalByX[xlabel] + d[traceOptions.orientation === "h" ? "x" : "y"][index]
                : d[traceOptions.orientation === "h" ? "x" : "y"][index];
            });
          });

          data.forEach(function (d, i) {
            d.text = d[traceOptions.orientation === "h" ? "x" : "y"].map(function (y, index) {
              return opts.plotlyConfig.displayPercent
                ? Math.round((y * 100) / totalByX[d[traceOptions.orientation === "h" ? "y" : "x"][index]], 3) + "%"
                : y;
            });

            d.textposition = "inside";
            if (opts.plotlyConfig.displayPercent) {
              d.hovertemplate = traceOptions.orientation === "h" ? "<b>%{text}<br>%{x}</b><br>%{y}</b>" : "<b>%{text}<br>%{y}</b><br>%{x}</b>";
            } else {
              d.hovertemplate = traceOptions.orientation === "h" ? "<b>%{text}<br>%{y}</b>" : "<b>%{text}<br>%{x}</b>";
            }
          });
          if (traceOptions.orientation !== "h" && layoutOptions.barmode === "relative") {
            for (let xLabel in totalByX) {
              if (totalByX.hasOwnProperty(xLabel)) {
                annotations.push({
                  x: xLabel,
                  y: totalByX[xLabel],
                  text: totalByX[xLabel],
                  xanchor: "center",
                  yanchor: "bottom",
                  showarrow: false,
                });
              }
            }
          }
        }
        layoutOptions.annotations = annotations;
        if (traceOptions.type === "pie") {
          data.forEach(function (d, i) {
            cwAPI.customLibs.utils.sort2Array(d.values, [d.labels], true);
            let color = d.labels.map(function (l, ii) {
              return opts.plotlyConfig.getColor(hAxisTitle, i + ii, l);
            });

            let bg = color.map(tinycolor).map(function (tc) {
              while (tc.toHsl().l < 0.75) tc.lighten(10);
              return tc.toHexString();
            });
            color = color.map(function (c) {
              return tinycolor(c).darken(20).toHexString();
            });

            d.textinfo = opts.plotlyConfig.displayPercent ? "label+percent" : "label+value";
            d.marker = {
              colors: bg,
              opacity: 1,
              line: {
                color: color,
                width: 4.2,
              },
            };
          });
        } else if (traceOptions.type === "bar") {
          data.forEach(function (d, i) {
            let color = opts.plotlyConfig.getColor(groupByTitle, i, d.name);
            let bg = tinycolor(color);
            while (bg.toHsl().l < 0.75) bg.lighten(10);

            d.marker = {
              color: bg.toHexString(),
              opacity: 1,
              line: {
                color: color,
                width: 4.2,
              },
            };
          });
        }
        Plotly.newPlot(result[0], data, $.extend(layout, layoutOptions, opts.plotly), opts.plotlyConfig);

        result[0].on("plotly_click", function (data) {
          let traceKey = data.points[0].data.name.split("#");
          let datumKey;

          if (data.points[0].fullData.type === "bar") {
            // bar chart
            if ((pivotData.colAttrs.length == 0 && !transpose) || pivotData.rowAttrs.length == 0) {
              datumKey = [];
              if (traceKey == " ") traceKey = data.points[0].data;
            } else datumKey = transpose ? data.points[0].y.split("#") : data.points[0].x.split("#");
          } else if (data.points[0].fullData.type === "pie") {
            // pie chart
            if (pivotData.colAttrs.length == 0) traceKey = [];
            datumKey = data.points[0].label.split("#");
          }

          opts.plotlyConfig.clickCallback(pivotData, pivotData.getAggregator(transpose ? datumKey : traceKey, transpose ? traceKey : datumKey).uniq);
        });

        return result.detach();
      };
    };
    makePlotlyScatterChart = function () {
      return function (pivotData, opts) {
        var colKey, colKeys, data, defaults, j, k, layout, len, len1, renderArea, result, rowKey, rowKeys, v;
        defaults = {
          localeStrings: {
            vs: "vs",
            by: "by",
          },
          plotly: {},
          plotlyConfig: {},
        };
        opts = $.extend(true, {}, defaults, opts);
        rowKeys = pivotData.getRowKeys();
        if (rowKeys.length === 0) {
          rowKeys.push([]);
        }
        colKeys = pivotData.getColKeys();
        if (colKeys.length === 0) {
          colKeys.push([]);
        }
        data = {
          x: [],
          y: [],
          text: [],
          type: "scatter",
          mode: "markers+text",
          textposition: "top center",
          marker: {
            size: [],
          },
        };
        let max = 0;
        for (j = 0, len = rowKeys.length; j < len; j++) {
          rowKey = rowKeys[j];
          for (k = 0, len1 = colKeys.length; k < len1; k++) {
            colKey = colKeys[k];
            v = pivotData.getAggregator(rowKey, colKey).value();
            if (v != null) {
              data.x.push(colKey.join("#"));
              data.y.push(rowKey.join("#"));
              data.text.push(v);
              data.marker.size.push(100 * v);
              max = Math.max(max, 100 * v);
            }
          }
        }
        data.marker.sizeref = max / 100;
        data.marker.sizemin = 1;

        layout = {
          title: pivotData.rowAttrs.join("#") + " vs " + pivotData.colAttrs.join("#"),
          hovermode: "closest",
          xaxis: {
            title: pivotData.colAttrs.join("#"),
            automargin: true,
          },
          yaxis: {
            title: pivotData.rowAttrs.join("#"),
            automargin: true,
          },
          width: window.innerWidth / 1.5,
          height: window.innerHeight,
        };
        renderArea = $("<div>", {
          style: "display:none;",
        }).appendTo($("body"));
        result = $("<div>").appendTo(renderArea);
        Plotly.newPlot(result[0], [data], $.extend(layout, opts.plotly), opts.plotlyConfig);
        result.detach();
        renderArea.remove();
        return result;
      };
    };

    return ($.pivotUtilities.plotly_renderers = {
      "Horizontal Bar Chart": makePlotlyChart(
        "closest",
        {
          type: "bar",
          orientation: "h",
        },
        {
          barmode: "group",
        },
        true
      ),
      "Horizontal Stacked Bar Chart": makePlotlyChart(
        "closest",
        {
          type: "bar",
          orientation: "h",
        },
        {
          barmode: "relative",
        },
        true
      ),
      "Bar Chart": makePlotlyChart(
        "closest",
        {
          type: "bar",
        },
        {
          barmode: "group",
        }
      ),
      "Stacked Bar Chart": makePlotlyChart(
        "closest",
        {
          type: "bar",
        },
        {
          barmode: "relative",
        },
        false
      ),
      "Line Chart": makePlotlyChart("x unified"),
      "Area Chart": makePlotlyChart("x unified", {
        stackgroup: 1,
      }),
      "Scatter Chart": makePlotlyScatterChart(),
      "Multiple Pie Chart": makePlotlyChart(
        "closest",
        {
          type: "pie",
          scalegroup: 1,
        },
        {},
        true
      ),
    });
  });
}.call(this));

//# sourceMappingURL=plotly_renderers.js.map
/**
 * RWD Table with freezing head and columns for jQuery
 *
 */
